##### Core System Setup

# https://www.percona.com/blog/2014/04/28/oom-relation-vm-swappiness0-new-kernel/
- name: System | Set vm.swappiness
  become: yes
  sysctl: >
    name=vm.swappiness
    value=1
    sysctl_set=yes

- name: System | Set TCP IPv4 Keep Alive
  become: yes
  sysctl: >
    name=net.ipv4.tcp_keepalive_time
    value=60
    sysctl_set=yes

- name: System | Set TCP IPv4 Keep Alive Interval
  become: yes
  sysctl: >
    name=net.ipv4.tcp_keepalive_intvl
    value=60
    sysctl_set=yes

- name: System | Set TCP IPv4 Keep Alive Probes
  become: yes
  sysctl: >
    name=net.ipv4.tcp_keepalive_probes
    value=5
    sysctl_set=yes

- name: System | Set TCP IPv4 Syn Flood Protection
  become: yes
  sysctl: >
    name=net.ipv4.tcp_syncookies
    value=1
    sysctl_set=yes

- name: Add Git Stable Release PPA
  become: yes
  apt_repository: repo='ppa:git-core/ppa' update_cache=yes state=present

- name: System | Install Common Tools
  become: yes
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
    - ntp
    - git
    - curl
    - tmux
    - screen
    - bind9utils
    - sysstat
    - fail2ban

- name: System | Check Current Timezone
  shell: cat /etc/timezone
  register: timestat
  changed_when: timestat.stdout != "{{ timezone }}"

- name: System | Set Timezone to UTC
  command: timedatectl set-timezone "{{ timezone }}"
  when: timestat.stdout != "{{ timezone }}"
  notify: restart ntp

##### User Setup

## Admin Users

- name: User Setup | Add SysAdmin Users
  user: name={{ item }} groups=sudo shell=/bin/bash
  with_items: "{{sysadmins}}"

- name: User Setup | Create SysAdmin User SSH Directory
  file: dest=/home/{{ item }}/.ssh owner={{ item }} group={{ item }} mode=750 state=directory
  with_items: "{{sysadmins}}"

- name: User Setup | Setup SysAdmin User Public Keys
  authorized_key:
     user={{ item }}
     key="{{ lookup('file', item + '-id_rsa.pub') }}"
  with_items: "{{sysadmins}}"

- name: Setup Sudoers for Sysadmin Users
  template: src=sysadmin_user.j2 dest=/etc/sudoers.d/{{ item }}_sysadmin owner=root group=root mode=440
  with_items:
    - "{{sysadmins}}"

## Machine Users

- name: User Setup | Add Machine User
  user: name={{ item }} groups=sudo shell=/bin/bash
  with_items: "{{machine_account}}"

- name: User Setup | Create Machine User SSH Directory
  file: dest=/home/{{ item }}/.ssh owner={{ item }} group={{ item }} mode=750 state=directory
  with_items: "{{machine_account}}"

- name: User Setup | Setup Machine User Public Key
  authorized_key:
     user={{ item }}
     key="{{ lookup('file', item + '-id_rsa.pub') }}"
  with_items: "{{machine_account}}"

- name: Setup Sudoers for Machine User
  template: src=sysadmin_user.j2 dest=/etc/sudoers.d/{{ item }}_sysadmin owner=root group=root mode=440
  with_items:
    - "{{machine_account}}"

## App Users
# This section creates App users when specified
# with variable setting of "appuser" to QA or Prod.
# There will likely be other users added in the future.
# IMPORTANT FEATURE: None of these users will have login
# privileges. You either have to sudo to them as a "sysadmin"
# or not at all.
##

## QA Data Application User

- name: User Setup | Add QA App User
  user: name={{ item }} shell=/bin/bash
  with_items: "{{qa_users}}"
  when: appuser is defined and appuser == "QA"

## Prod Data Application User

- name: User Setup | Add Prod App User
  user: name={{ item }} shell=/bin/bash
  with_items: "{{prod_users}}"
  when: appuser is defined and appuser == "PROD"

- name: User Setup | Create Prod App User SSH Directory
  file: dest=/home/{{ item }}/.ssh owner={{ item }} group={{ item }} mode=750 state=directory
  with_items: "{{prod_users}}"
  when: appuser is defined and appuser == "PROD"

- name: User Setup | Setup Prod App User Public Key
  authorized_key:
     user={{ item }}
     key="{{ lookup('file', item + '-id_rsa.pub') }}"
  with_items: "{{prod_users}}"
  when: appuser is defined and appuser == "PROD"

## Data Users
# This section is for the DS Data team and only
# for use for people who need direct access to our
# internal data stores via SSH proxy.

- name: User Setup | Add Limited Users
  user: name={{ item }} shell=/bin/bash
  with_items: "{{data_users}}"
  when: data_proxy is defined and data_proxy == true

- name: User Setup | Create Limited User SSH Directory
  file: dest=/home/{{ item }}/.ssh owner={{ item }} group={{ item }} mode=750 state=directory
  with_items: "{{data_users}}"
  when: data_proxy is defined and data_proxy == true

- name: User Setup | Setup Limited User Public Keys
  authorized_key: >
     user={{ item }}
     key="{{ lookup('file', item + '-id_rsa.pub') }}"
  with_items: "{{data_users}}"
  when: data_proxy is defined and data_proxy == true
